import asyncio
import queue
import os
from typing import Dict, List, Optional, Any, Type
from pydantic import BaseModel, Field
from datetime import datetime

# System prompts
ORCHESTRATOR_SYSTEM_PROMPT = (
    "You are the Orchestrator Agent for the OpenManus project. "
    "Your primary role is to understand complex user requests, decompose them into manageable sub-tasks, "
    "develop a coherent, step-by-step plan, and delegate these sub-tasks to specialized agents. "
    "You must manage the overall workflow, synthesize results from specialized agents, and present the final solution."
    "Key principles for your operation:"
    "1. **Decomposition & Planning:** Break down complex goals. Clearly outline your plan. For each step, decide if you will perform it or delegate it."
    "2. **Delegation:** If delegating, clearly define the sub-task and provide all necessary context. Use the `delegate_task_to_specialist` tool. Specify the `agent_role` (e.g., \"BrainstormingAgent\", \"CodingAgent\", \"WebSearchAgent\") and the `sub_task_prompt`."
    "3. **Synthesis:** Combine outputs from specialized agents and your own work into a cohesive final result."
    "4. **State Management:** Maintain awareness of the overall task progress and the status of sub-tasks."
    "5. **Error Handling:** If a specialized agent fails or returns an unsatisfactory result, re-evaluate your plan, re-delegate, or try an alternative approach."
    "The initial working directory is: {directory}."
)

ORCHESTRATOR_NEXT_STEP_PROMPT = """Review the user's current request, your current plan, and any previous results. Determine the next action.
1. **Current Goal:** Briefly state the overall user goal.
2. **Current Plan Step:** What is the current step in your plan?
3. **Action Choice:** Will you perform this step yourself or delegate it?
   - If performing yourself: Select an appropriate tool from your own toolset.
   - If delegating: Use the `delegate_task_to_specialist` tool. Specify `agent_role` and `sub_task_prompt`.

If the overall task is complete, use the `Terminate` tool."""

# Core classes
class Manus:
    def __init__(self, **kwargs):
        self.name = kwargs.get("name", "Manus")
        self.description = kwargs.get("description", "Base Manus class")
        self.system_prompt = kwargs.get("system_prompt", "")
        self.next_step_prompt = kwargs.get("next_step_prompt", "")
        self.tools = ToolCollection([])
        self.memory = MemoryBase()

    async def think(self):
        print(f"{self.name} is thinking...")
        await asyncio.sleep(0.1)
        print(f"{self.name} has finished thinking.")
        return True

    async def act(self, tool_name: str, tool_args: Dict[str, Any]) -> str:
        print(f"{self.name} is acting with tool: {tool_name} and arguments: {tool_args}")
        await asyncio.sleep(0.1)
        return f"Action {tool_name} completed successfully."

    async def _send_event(self, event_type: str, content: Any, source: Optional[str] = None):
        event_data = {
            "type": event_type,
            "source": source or self.name,
            "content": content,
            "timestamp": datetime.now().isoformat()
        }
        if hasattr(self, "event_q") and self.event_q:
            try:
                self.event_q.put(event_data)
            except Exception as e:
                print(f"[ERROR] Failed to put event: {e}")
                print(f"Event data: {event_data}")
        else:
            print(f"Event Sent: {event_data}")
            if not hasattr(self, "event_log"):
                self.event_log = []
            self.event_log.append(event_data)

class Tool:
    name: str
    description: str
    args_schema: Optional[Type[BaseModel]] = None
    dangerous: bool = False

    def __init__(self, name: str, description: str, args_schema: Optional[Type[BaseModel]] = None, dangerous: bool = False):
        self.name = name
        self.description = description
        self.args_schema = args_schema
        self.dangerous = dangerous

    async def execute(self, **kwargs: Any) -> str:
        return f"Tool {self.name} executed successfully with arguments: {kwargs}"

class ToolCollection:
    def __init__(self, tools: List[Tool]):
        self.tools = {tool.name: tool for tool in tools}

    def add_tool(self, tool: Tool):
        self.tools[tool.name] = tool

    def get_tool(self, name: str) -> Optional[Tool]:
        return self.tools.get(name)

class MemoryBase:
    def __init__(self):
        self.messages = []

    def add_message(self, role: str, content: str):
        self.messages.append({"role": role, "content": content})

class DelegateTaskArgs(BaseModel):
    agent_role: str = Field(description="The role of the specialized agent to delegate to (e.g., BrainstormingAgent, CodingAgent, WebSearchAgent).")
    sub_task_prompt: str = Field(description="The detailed prompt or instructions for the specialized agent to perform the sub-task.")

class DelegateTaskTool(Tool):
    def __init__(self):
        super().__init__(
            name="delegate_task_to_specialist",
            description="Delegates a sub-task to a specialized agent. Provide the agent_role and the sub_task_prompt.",
            args_schema=DelegateTaskArgs
        )

    async def execute(self, agent_role: str, sub_task_prompt: str) -> str:
        print(f"Simulating delegation to {agent_role} with prompt: {sub_task_prompt[:100]}...")
        await asyncio.sleep(0.1)
        return f"Successfully delegated task to {agent_role}."

class TerminateTool(Tool):
    def __init__(self):
        super().__init__(
            name="Terminate",
            description="Terminates the current task and provides a final message."
        )

    async def execute(self, message: str = "Task terminated successfully.") -> str:
        print(message)
        return message

class OrchestratorAgent(Manus):
    name: str = "OrchestratorAgent"
    description: str = "Coordinates specialized agents to solve complex tasks."

    def __init__(self, event_q: Optional[queue.Queue] = None, **kwargs: Any):
        super().__init__(**kwargs)
        self.event_q = event_q
        self.system_prompt = ORCHESTRATOR_SYSTEM_PROMPT.format(directory=os.getcwd())
        self.next_step_prompt = ORCHESTRATOR_NEXT_STEP_PROMPT
        self.tools = ToolCollection([
            DelegateTaskTool(),
            TerminateTool()
        ])
        if not self.event_q:
            self.event_log = []
            print(f"{self.name} initialized without an event queue.")
        else:
            self.event_q.put({
                "type": "log",
                "source": self.name,
                "content": f"{self.name} initialized.",
                "timestamp": datetime.now().isoformat()
            })

    async def run(self, prompt: str, event_q: Optional[queue.Queue] = None) -> None:
        if event_q:
            self.event_q = event_q

        await self._send_event("log", f"Orchestrator received prompt: {prompt}")
        self.memory.add_message(role="user", content=prompt)

        if "search" in prompt.lower():
            await self._send_event("log", "Simulating web search...")
            await asyncio.sleep(0.1)
            result = "Simulated search results: Found information about AI advancements."
            await self._send_event("message", result)
            self.memory.add_message(role="assistant", content=result)
        elif "code" in prompt.lower() or "develop" in prompt.lower():
            await self._send_event("log", "Simulating code generation...")
            await asyncio.sleep(0.1)
            result = "```python\nprint(\"Hello, AI world!\")\n```"
            await self._send_event("message", result)
            self.memory.add_message(role="assistant", content=result)
        else:
            await self._send_event("log", "Orchestrator handling the request directly.")
            await asyncio.sleep(0.1)
            result = "Orchestrator processed the request directly."
            await self._send_event("message", result)
            self.memory.add_message(role="assistant", content=result)

        await self._send_event("log", "Orchestrator terminating the task.")
        final_result = await self.tools.get_tool("Terminate").execute(message="Task completed and terminated by Orchestrator.")
        await self._send_event("final_result", final_result)
        await self._send_event("Done", "All operations finished.")

# To test manually
if __name__ == "__main__":
    async def main():
        initial_prompt = "Find information about the latest AI advancements and then write a short summary."
        event_q = queue.Queue()
        agent = OrchestratorAgent(event_q=event_q)
        await agent.run(initial_prompt)

        print("\n--- Event Log ---")
        while not event_q.empty():
            event = event_q.get()
            print(f"{event.get('timestamp')} - {event.get('source')}: {event.get('content')}")

    asyncio.run(main())
